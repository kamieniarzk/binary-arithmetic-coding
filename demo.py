import numpy as np
from PIL import Image
from matplotlib import cm
from matplotlib import pyplot as plt
from bitstring import BitArray
import math
import re
from array import array

FILES_DIR = 'files'
TEST_IMG = 'barbara.pgm'


def custom_print(input):
    """Custom function for enabling and disabling console logs"""
    return
    custom_print(input)


def read_pgm(pgmf):
    """Return a raster of integers from a PGM as a list of lists."""
    first_line = pgmf.readline()
    assert first_line == b'P5\n'
    pgmf.readline()
    second_line = pgmf.readline()
    (width, height) = [int(i) for i in second_line.split()]
    depth = int(pgmf.readline())
    assert depth <= 255

    raster = []
    for y in range(height):
        row = []
        for y in range(width):
            row.append(ord(pgmf.read(1)))
        raster.append(row)
    return raster


def calculate_freq_table(input_list):
    freq_dict = {}
    for element in input_list:
        freq_dict[element] = freq_dict[element] + \
            1 if element in freq_dict else 1

    return freq_dict


def calculate_integer_prob_mass_from_freq_table(freq_table):
    prob_map = {}
    prev_freq = 0
    for symbol in sorted(freq_table):
        current_upper_bound = freq_table[symbol] + prev_freq
        prob_map[symbol] = [prev_freq, current_upper_bound]
        prev_freq = current_upper_bound

    return prob_map


def calculate_integer_prob_mass(input_list):
    freq_table = calculate_freq_table(input_list)
    return calculate_integer_prob_mass_from_freq_table(freq_table)


def calculate_sum_of_all(input_list):
    freq_table = calculate_freq_table(input_list)
    return np.sum(list(freq_table.values()))


def printB(binarty_int, variable=''):
    print_num = bin(binarty_int)[2:]
    while len(print_num) < 8:
        print_num = '0' + print_num
    custom_print(variable + ': ' + print_num + ' (' + str(binarty_int) + ')')


def getBinaryFromInt(curr_int):
    print_num = bin(curr_int)[2:]
    while len(print_num) < 8:
        print_num = '0' + print_num
    return print_num


def join_int_list(int_list):
    return ''.join(list(map(str, int_list)))


def shift_left_and_fill(number, fill_bit):
    shifted = (number << 1) & int(f'0000000011111111', 2)
    printB(shifted, 'shifted')
    return shifted | int(f'0000000{fill_bit}', 2)


def shift_right(number, shift_number):
    return (number >> shift_number) & int('0000000011111111', 2)


def get_oldest_bit(number):
    number = number & int('0000000011111111', 2)
    return (number & int('10000000', 2)) >> 7


def integer_arithmetic_encoding(input_list):
    freq_map = calculate_freq_table(input_list)
    prob_map = calculate_integer_prob_mass(input_list)

    N = calculate_sum_of_all(input_list)
    D = int('00000000', 2)
    G = int('11111111', 2)
    LN = 0
    k = 0
    prev_element = input_list[0]
    out_list = []

    for element in input_list:
        current_interval = prob_map[element]
        R = G - D + 1
        ORG_D = D
        D = (D + math.floor(R * current_interval[0] / N))
        G = ORG_D + math.floor(R * current_interval[1] / N) - 1

        D_oldest_bit = get_oldest_bit(D)
        G_oldest_bit = get_oldest_bit(G)

        while True:
            if D_oldest_bit == G_oldest_bit:
                out_list.append(G_oldest_bit)
                D = shift_left_and_fill(D, 0)
                G = shift_left_and_fill(G, 1)

                for i in range(LN):
                    out_list.append(1 - G_oldest_bit)

                LN = 0

                D_oldest_bit = get_oldest_bit(D)
                G_oldest_bit = get_oldest_bit(G)

            elif (D & int('11000000', 2) == int('01000000')) and (G & int('11000000', 2) == int('10000000')):
                D = (shift_left_and_fill(D, 0) & int('01111111', 2)) | int(
                    f'{D_oldest_bit}0000000', 2)
                G = (shift_left_and_fill(G, 1) & int('01111111', 2)) | int(
                    f'{G_oldest_bit}0000000', 2)
                LN += 1

            else:
                break

        k += 1

    seen_1 = False
    ending = []
    current_bit = 0
    k = 0

    last_bit = D & int('00000001', 2)

    while last_bit == 0 and k < 8:
        D = shift_right(D, 1)
        last_bit = D & int('00000001', 2)
        k += 1

    if k < 8:
        for i in range(k, 8):
            last_bit = D & int('00000001', 2)
            D = shift_right(D, 1)
            ending.insert(0, last_bit)

        out_list += ending
    else:
        out_list += [0, 0, 0, 0, 0, 0, 0, 0]

    custom_print('>> Encoding finished, output:')
    custom_print(''.join(list(map(str, out_list))))

    return [out_list, prob_map, N]


def find_symbol_in_prob_map(value, prob_map):
    custom_print(f'FIND SYMBOL: {value}')
    custom_print(f'PROB_MAP: {prob_map}')
    for symbol in prob_map:
        current_interval = prob_map[symbol]
        if value >= current_interval[0] and value < current_interval[1]:
            return symbol

    return 'ERROR'


def integer_arithmetic_decoding(input_string, prob_map, N):
    D = int('00000000', 2)
    G = int('11111111', 2)
    R = int('100000000', 2)
    LS = 1

    Kn = int(join_int_list(input_string[:8]), 2)
    output = []
    k = 0
    input_string_counter = 8
    LN = 0
    while k < N:
        R = G - D + 1
        current_value = ((Kn - D + 1) * N - 1) / R
        current_symbol = find_symbol_in_prob_map(current_value, prob_map)
        output.append(current_symbol)

        current_interval = prob_map[current_symbol]
        ORG_D = D
        D = (D + math.floor(R * current_interval[0] / N))
        G = ORG_D + math.floor(R * current_interval[1] / N) - 1

        D_oldest_bit = get_oldest_bit(D)
        G_oldest_bit = get_oldest_bit(G)

        while D_oldest_bit == G_oldest_bit:
            Kn = shift_left_and_fill(Kn, int(
                input_string[input_string_counter] if input_string_counter < len(input_string) else 0))
            input_string_counter += 1
            D = shift_left_and_fill(D, 0)
            G = shift_left_and_fill(G, 1)
            custom_print(f'>>> OUT: {G_oldest_bit}')

            D_oldest_bit = get_oldest_bit(D)
            G_oldest_bit = get_oldest_bit(G)

        k += 1

    custom_print('>> Decoding finished, output:')
    custom_print(''.join(list(map(str, output))))

    return output


def test_arithmetic_encoding_decoding(input_string):
    messages = []
    messages.append('#######################################\n')
    messages.append(f'#### TESTING INPUT: {input_string}\n')
    messages.append('#######################################\n')
    output, prob_map, N = integer_arithmetic_encoding(input_string)
    custom_print(prob_map)
    decoded = integer_arithmetic_decoding(output, prob_map, N)
    decoded_string = ''.join(list(map(str, decoded)))
    is_success = decoded_string == input_string
    if is_success:
        messages.append('#######################################\n')
        messages.append('#### TEST PASSED ######################\n')
        messages.append('#######################################\n')
    else:
        messages.append('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n')
        messages.append('#### TEST FAILED ######################\n')
        messages.append(f'output: {decoded_string}\n')
        messages.append('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n')
    return messages


def test_short_strings():
    test_strings = ['AB', 'ABC', 'AAC', 'AAAC', 'AAAAC', 'AACC', 'ACAC', 'AABC', 'ACA', '1234567890', '1234567890', 'ARYTMETYKA', '1111100000',
                    '1234554321', '0000055555', ';lasdjvkop3r92orufe90fuoasdjfvkvnawopsidf0933']

    for i in range(256):
        test_strings.append(getBinaryFromInt(i))

    messages = []
    for test_string in test_strings:
        messages += test_arithmetic_encoding_decoding(test_string)
        messages += '\n'

    for message in messages:
        custom_print(message)


def test_binary_strings():
    string1 = '1111111110000010111111101011111100101111011101110101101010101'
    string2 = '111111111000001011111110101111110010111101110111010110101010101010111111110'
    string3 = '10101010111010101010111100000101011010110101010101010101010101010101010111111111111000001011111110101111110010111101110111010110101010101010111111110'
    string4 = '10101010111010101010111100000101011010110101010101010101010101010101010111111111111000001101111111010111111001011110111011101011010101010101011111110111111101011111100101111011101110101101010101010101111111011111110101111110010111101110111010110101010101010111111011111110101111110010111101110111010110101010101010111111110'
    string
    string
    test_strings = ['AB', 'ABC', 'AAC', 'AAAC', 'AAAAC', 'AACC', 'ACAC', 'AABC', 'ACA', '1234567890', '1234567890', 'ARYTMETYKA', '1111100000',
                    '1234554321', '0000055555', ';lasdjvkop3r92orufe90fuoasdjfvkvnawopsidf0933', string1, string2, string3, string4, string5]
    with open('./logs.txt', 'w') as log_file:

        messages = []
        for test_string in test_strings:
            messages += test_arithmetic_encoding_decoding(test_string)
            messages += '\n'

        for message in messages:
            log_file.write(message)


def read_file_bits(filename):
    with open(filename, 'rb') as f:
        out = []
        while 1:
            byte_s = f.read(1)
            if not byte_s:
                break
            byte_int = bin(int(byte_s.hex(), base=16))[2:]
            for i in range(8 - len(byte_int)):
                out.append('0')
            for bit in byte_int:
                out.append(bit)
        print(len(out))
        return out


def write_bits_to_file(input_bits, output_filename='output.txt'):
    with open(output_filename, 'wb') as f:
        out = []
        bit_counter = 0
        string = ''
        for bit in input_bits:
            string += bit
            bit_counter += 1
            if bit_counter == 8:
                f.write(int(string, 2).to_bytes(1, 'big'))
                bit_counter = 0
                string = ''


if __name__ == '__main__':
    input = read_file_bits(f'{FILES_DIR}/{TEST_IMG}')

    output, prob_map, N = integer_arithmetic_encoding(input)
    custom_print(prob_map)

    write_bits_to_file(map(str, output), f'{FILES_DIR}/compressed.txt')

    decoded = integer_arithmetic_decoding(output, prob_map, N)
    custom_print(decoded)

    write_bits_to_file(decoded, f'{FILES_DIR}/decompressed_image.pgm')
